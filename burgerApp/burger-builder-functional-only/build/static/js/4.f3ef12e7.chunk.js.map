{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","onChange","changed","value","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_Users_ahrav_Desktop_React_burgerApp_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuthenticate","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_7__","isLoading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","errorMessage","error","message","authRedirect","isAuthenticate","react_router_dom__WEBPACK_IMPORTED_MODULE_13__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_8__","btnType","clicked","Component","connect","auth","loading","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.f3ef12e7.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.css'\n\nconst input = props => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n            className={inputClasses.join(' ')} {...props.elementConfig}\n            onChange={props.changed} \n            value={props.value}/>;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n            className={inputClasses.join(' ')} {...props.elementConfig}\n            onChange={props.changed} \n            value={props.value}/>;\n            break;\n        case ('select'):\n            inputElement = (\n            <select\n                className={inputClasses.join(' ')}\n                onChange={props.changed} \n                value={props.value}>\n                {props.elementConfig.options.map(option => (\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\n                ))}\n            </select>\n            );\n            break;\n        default:\n            inputElement = <input \n            className={inputClasses.join(' ')} {...props.elementConfig}\n            onChange={props.changed} \n            value={props.value}/>\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\",\"Input\":\"Auth__Input__MXqRP\"};","import React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport { updateObject } from '../../shared/utility';\nimport { checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignUp: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls =  updateObject(this.state.controls, {\n            [controlName] : updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        });\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = event => {\n        event.preventDefault();\n        this.props.onAuthenticate(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignUp: !prevState.isSignUp};\n        })\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key],\n            })\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n        ))\n\n        if (this.props.isLoading){\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if (this.props.error){\n            errorMessage =(\n                <p>{this.props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticate) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">Submit</Button>\n                </form>\n                <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticate: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuthenticate: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"],"sourceRoot":""}