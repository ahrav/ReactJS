{"ast":null,"code":"import _objectSpread from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc//withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Full Name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 3,\n            maxLength: 30\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 3,\n            maxLength: 30\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zip Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'cheapest',\n          validation: \"\",\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ingredients,\n        totalPrice: _this.props.price,\n        orderData: formData\n      };\n\n      _this.props.onOrderBurger(order);\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var _inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        disabled: !this.state.formIsValid,\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"ORDER\"));\n\n      if (this.props.isLoading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Enter Contact Info\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ingredients: state.ingredients,\n    price: state.totalPrice,\n    isLoading: state.loading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onOrderBurger: function onOrderBurger(orderData) {\n      return dispatch(actions.purchaseBurger(orderData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/Users/ahrav/Desktop/React/burgerApp/burger-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","connect","withErrorHandler","actions","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","maxLength","valid","touched","street","zipCode","country","email","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","totalPrice","price","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","length","formElementsArray","key","push","id","config","form","map","formElement","isLoading","mapStateToProps","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc//withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Full Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 30\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 30\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Zip Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}]\n                },\n                value: 'cheapest',\n                validation: \"\",\n                valid: true\n            },\n        },\n        formIsValid: false,\n        loading: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm){\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            totalPrice: this.props.price,\n            orderData: formData\n        }\n        this.props.onOrderBurger(order);\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true\n        if (!rules) {\n            return true;\n        }\n\n        if (rules.required) {\n            isValid = value.trim() !== \"\" && isValid;\n        }\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        }\n\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm){\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid})\n    }\n\n    render(){\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            })\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                    key={formElement.id} \n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button disabled={!this.state.formIsValid} btnType=\"Success\">ORDER</Button>\n            </form>\n        );\n        if (this.props.isLoading){\n            form = <Spinner />\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter Contact Info</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.ingredients,\n        price: state.totalPrice,\n        isLoading: state.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData) => dispatch(actions.purchaseBurger(orderData))\n    }\n}\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}