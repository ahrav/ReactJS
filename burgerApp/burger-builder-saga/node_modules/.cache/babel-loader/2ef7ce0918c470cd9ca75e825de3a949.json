{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder-saga/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAuth),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchBurgerBuilder),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchOrder);\n\nimport { takeEvery, all } from 'redux-saga/effects/';\nimport * as actionTypes from '../actions/actionTypes';\nimport { logoutSaga, checkAuthTimeoutSaga, authUserSaga, authCheckStateSaga } from './auth';\nimport { initIngredientsSaga } from './burgerBuilder';\nimport { purchaseBurgerSaga, fetchOrdersSaga } from './order';\nexport function watchAuth() {\n  return _regeneratorRuntime.wrap(function watchAuth$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([takeEvery(actionTypes.AUTH_INITIATE_LOGOUT, logoutSaga), takeEvery(actionTypes.AUTH_CHECK_TIMEOUT, checkAuthTimeoutSaga), takeEvery(actionTypes.AUTH_USER, authUserSaga), takeEvery(actionTypes.AUTH_CHECK_USER_STATE, authCheckStateSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function watchBurgerBuilder() {\n  return _regeneratorRuntime.wrap(function watchBurgerBuilder$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actionTypes.INIT_INGREDIENTS, initIngredientsSaga);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function watchOrder() {\n  return _regeneratorRuntime.wrap(function watchOrder$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(actionTypes.PURCHASE_BURGER, purchaseBurgerSaga);\n\n        case 2:\n          _context3.next = 4;\n          return takeEvery(actionTypes.FETCH_ORDERS, fetchOrdersSaga);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/ahrav/Desktop/React/burgerApp/burger-builder-saga/src/store/sagas/index.js"],"names":["watchAuth","watchBurgerBuilder","watchOrder","takeEvery","all","actionTypes","logoutSaga","checkAuthTimeoutSaga","authUserSaga","authCheckStateSaga","initIngredientsSaga","purchaseBurgerSaga","fetchOrdersSaga","AUTH_INITIATE_LOGOUT","AUTH_CHECK_TIMEOUT","AUTH_USER","AUTH_CHECK_USER_STATE","INIT_INGREDIENTS","PURCHASE_BURGER","FETCH_ORDERS"],"mappings":";;;;yBAOiBA,S;;;yBASAC,kB;;;yBAIAC,U;;AApBjB,SAASC,SAAT,EAAoBC,GAApB,QAA+B,qBAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AAEA,SAASC,UAAT,EAAqBC,oBAArB,EAA2CC,YAA3C,EAAyDC,kBAAzD,QAAmF,QAAnF;AACA,SAASC,mBAAT,QAAoC,iBAApC;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,SAApD;AAEA,OAAO,SAAUZ,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMI,GAAG,CAAC,CACND,SAAS,CAACE,WAAW,CAACQ,oBAAb,EAAmCP,UAAnC,CADH,EAENH,SAAS,CAACE,WAAW,CAACS,kBAAb,EAAiCP,oBAAjC,CAFH,EAGNJ,SAAS,CAACE,WAAW,CAACU,SAAb,EAAwBP,YAAxB,CAHH,EAINL,SAAS,CAACE,WAAW,CAACW,qBAAb,EAAoCP,kBAApC,CAJH,CAAD,CAAT;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAUR,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAME,SAAS,CAACE,WAAW,CAACY,gBAAb,EAA+BP,mBAA/B,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUR,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMC,SAAS,CAACE,WAAW,CAACa,eAAb,EAA8BP,kBAA9B,CAAf;;AADG;AAAA;AAEH,iBAAMR,SAAS,CAACE,WAAW,CAACc,YAAb,EAA2BP,eAA3B,CAAf;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, all } from 'redux-saga/effects/';\nimport * as actionTypes from '../actions/actionTypes';\n\nimport { logoutSaga, checkAuthTimeoutSaga, authUserSaga, authCheckStateSaga } from './auth';\nimport { initIngredientsSaga } from './burgerBuilder';\nimport { purchaseBurgerSaga, fetchOrdersSaga } from './order';\n\nexport function* watchAuth() {\n    yield all([\n        takeEvery(actionTypes.AUTH_INITIATE_LOGOUT, logoutSaga),\n        takeEvery(actionTypes.AUTH_CHECK_TIMEOUT, checkAuthTimeoutSaga),\n        takeEvery(actionTypes.AUTH_USER, authUserSaga),\n        takeEvery(actionTypes.AUTH_CHECK_USER_STATE, authCheckStateSaga)\n    ])\n}\n\nexport function* watchBurgerBuilder() {\n    yield takeEvery(actionTypes.INIT_INGREDIENTS, initIngredientsSaga)\n}\n\nexport function* watchOrder() {\n    yield takeEvery(actionTypes.PURCHASE_BURGER, purchaseBurgerSaga)\n    yield takeEvery(actionTypes.FETCH_ORDERS, fetchOrdersSaga)\n}"]},"metadata":{},"sourceType":"module"}