{"ast":null,"code":"import _defineProperty from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ahrav/Desktop/React/burgerApp/burger-builder/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\n\nvar Auth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignUp: true\n    };\n\n    _this.inputChangedHandler = function (event, controlName) {\n      var updatedControls = _objectSpread({}, _this.state.controls, _defineProperty({}, controlName, _objectSpread({}, _this.state.controls[controlName], {\n        value: event.target.value,\n        valid: _this.checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updatedControls\n      });\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n\n      _this.props.onAuthenticate(_this.state.controls.email.value, _this.state.controls.password.value, _this.state.isSignUp);\n    };\n\n    _this.switchAuthModeHandler = function () {\n      _this.setState(function (prevState) {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n        this.props.onSetAuthRedirectPath();\n      }\n    }\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        var pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.isNumeric) {\n        var _pattern = /^\\d+$/;\n        isValid = _pattern.test(value) && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        });\n      });\n\n      if (this.props.isLoading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        });\n      }\n\n      var errorMessage = null;\n\n      if (this.props.error) {\n        errorMessage = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, this.props.error.message);\n      }\n\n      var authRedirect = null;\n\n      if (this.props.isAuthenticate) {\n        authRedirect = React.createElement(Redirect, {\n          to: this.props.authRedirectPath,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.Auth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, authRedirect, errorMessage, React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, form, React.createElement(Button, {\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(Button, {\n        clicked: this.switchAuthModeHandler,\n        btnType: \"Danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"SWITCH TO \", this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isLoading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticate: state.auth.token !== null,\n    buildingBurger: state.buildingBurger.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuthenticate: function onAuthenticate(email, password, isSignUp) {\n      return dispatch(actions.auth(email, password, isSignUp));\n    },\n    onSetAuthRedirectPath: function onSetAuthRedirectPath() {\n      return dispatch(actions.setAuthRedirectPath('/'));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/ahrav/Desktop/React/burgerApp/burger-builder/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Spinner","Redirect","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuthenticate","switchAuthModeHandler","prevState","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","formElementsArray","key","push","id","config","form","map","formElement","isLoading","errorMessage","error","message","authRedirect","isAuthenticate","mapStateToProps","auth","loading","token","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;IAEMC,I;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,KAAK,EAAE;AACHC,UAAAA,WAAW,EAAE,OADV;AAEHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFZ;AAMHC,UAAAA,KAAK,EAAE,EANJ;AAOHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERC,YAAAA,OAAO,EAAE;AAFD,WAPT;AAWHC,UAAAA,KAAK,EAAE,KAXJ;AAYHC,UAAAA,OAAO,EAAE;AAZN,SADD;AAeNC,QAAAA,QAAQ,EAAE;AACNV,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,UADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFT;AAMNC,UAAAA,KAAK,EAAE,EAND;AAONC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERK,YAAAA,SAAS,EAAE;AAFH,WAPN;AAWNH,UAAAA,KAAK,EAAE,KAXD;AAYNC,UAAAA,OAAO,EAAE;AAZH;AAfJ,OADN;AA+BJG,MAAAA,QAAQ,EAAE;AA/BN,K;;UAuERC,mB,GAAsB,UAACC,KAAD,EAAQC,WAAR,EAAwB;AAC1C,UAAMC,eAAe,qBACd,MAAKnB,KAAL,CAAWC,QADG,sBAEhBiB,WAFgB,oBAGV,MAAKlB,KAAL,CAAWC,QAAX,CAAoBiB,WAApB,CAHU;AAIbX,QAAAA,KAAK,EAAEU,KAAK,CAACG,MAAN,CAAab,KAJP;AAKbI,QAAAA,KAAK,EAAE,MAAKU,aAAL,CAAmBJ,KAAK,CAACG,MAAN,CAAab,KAAhC,EAAuC,MAAKP,KAAL,CAAWC,QAAX,CAAoBiB,WAApB,EAAiCV,UAAxE,CALM;AAMbI,QAAAA,OAAO,EAAE;AANI,UAArB;;AASA,YAAKU,QAAL,CAAc;AAACrB,QAAAA,QAAQ,EAAEkB;AAAX,OAAd;AACH,K;;UAEDI,a,GAAgB,UAAAN,KAAK,EAAI;AACrBA,MAAAA,KAAK,CAACO,cAAN;;AACA,YAAKC,KAAL,CAAWC,cAAX,CAA0B,MAAK1B,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BK,KAApD,EAA2D,MAAKP,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BN,KAAxF,EAA+F,MAAKP,KAAL,CAAWe,QAA1G;AACH,K;;UAEDY,qB,GAAwB,YAAM;AAC1B,YAAKL,QAAL,CAAc,UAAAM,SAAS,EAAI;AACvB,eAAO;AAACb,UAAAA,QAAQ,EAAE,CAACa,SAAS,CAACb;AAAtB,SAAP;AACH,OAFD;AAGH,K;;;;;;;wCA3DmB;AAChB,UAAI,CAAC,KAAKU,KAAL,CAAWI,cAAZ,IAA8B,KAAKJ,KAAL,CAAWK,gBAAX,KAAgC,GAAlE,EAAsE;AAClE,aAAKL,KAAL,CAAWM,qBAAX;AACH;AACJ;;;kCAEaxB,K,EAAOyB,K,EAAO;AACxB,UAAIC,OAAO,GAAG,IAAd;;AACA,UAAI,CAACD,KAAL,EAAY;AACR,eAAO,IAAP;AACH;;AAED,UAAIA,KAAK,CAACvB,QAAV,EAAoB;AAChBwB,QAAAA,OAAO,GAAG1B,KAAK,CAAC2B,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AAED,UAAID,KAAK,CAAClB,SAAV,EAAqB;AACjBmB,QAAAA,OAAO,GAAG1B,KAAK,CAAC4B,MAAN,IAAgBH,KAAK,CAAClB,SAAtB,IAAmCmB,OAA7C;AACH;;AAED,UAAID,KAAK,CAACI,SAAV,EAAqB;AACjBH,QAAAA,OAAO,GAAG1B,KAAK,CAAC4B,MAAN,IAAgBH,KAAK,CAACI,SAAtB,IAAmCH,OAA7C;AACH;;AAED,UAAID,KAAK,CAACtB,OAAV,EAAmB;AACf,YAAM2B,OAAO,GAAG,uIAAhB;AACAJ,QAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAa/B,KAAb,KAAuB0B,OAAjC;AACH;;AAED,UAAID,KAAK,CAACO,SAAV,EAAqB;AACjB,YAAMF,QAAO,GAAG,OAAhB;AACAJ,QAAAA,OAAO,GAAGI,QAAO,CAACC,IAAR,CAAa/B,KAAb,KAAuB0B,OAAjC;AACH;;AAED,aAAOA,OAAP;AACH;;;6BA0BQ;AAAA;;AACL,UAAMO,iBAAiB,GAAG,EAA1B;;AACA,WAAK,IAAIC,GAAT,IAAgB,KAAKzC,KAAL,CAAWC,QAA3B,EAAqC;AACjCuC,QAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,UAAAA,EAAE,EAAEF,GADe;AAEnBG,UAAAA,MAAM,EAAE,KAAK5C,KAAL,CAAWC,QAAX,CAAoBwC,GAApB;AAFW,SAAvB;AAIH;;AAED,UAAII,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAsB,UAAAC,WAAW;AAAA,eACxC,oBAAC,KAAD;AACI,UAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,UAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBzC,WAFpC;AAGQ,UAAA,aAAa,EAAE4C,WAAW,CAACH,MAAZ,CAAmBxC,aAH1C;AAIQ,UAAA,KAAK,EAAE2C,WAAW,CAACH,MAAZ,CAAmBrC,KAJlC;AAKQ,UAAA,OAAO,EAAE,CAACwC,WAAW,CAACH,MAAZ,CAAmBjC,KALrC;AAMQ,UAAA,cAAc,EAAEoC,WAAW,CAACH,MAAZ,CAAmBpC,UAN3C;AAOQ,UAAA,OAAO,EAAEuC,WAAW,CAACH,MAAZ,CAAmBhC,OAPpC;AAQQ,UAAA,OAAO,EAAE,iBAACK,KAAD;AAAA,mBAAW,MAAI,CAACD,mBAAL,CAAyBC,KAAzB,EAAgC8B,WAAW,CAACJ,EAA5C,CAAX;AAAA,WARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADwC;AAAA,OAAjC,CAAX;;AAYA,UAAI,KAAKlB,KAAL,CAAWuB,SAAf,EAAyB;AACrBH,QAAAA,IAAI,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AAED,UAAII,YAAY,GAAG,IAAnB;;AAEA,UAAI,KAAKxB,KAAL,CAAWyB,KAAf,EAAqB;AACjBD,QAAAA,YAAY,GACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI,KAAKxB,KAAL,CAAWyB,KAAX,CAAiBC,OAArB,CADJ;AAGH;;AAED,UAAIC,YAAY,GAAG,IAAnB;;AACA,UAAI,KAAK3B,KAAL,CAAW4B,cAAf,EAA+B;AAC3BD,QAAAA,YAAY,GAAG,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAE,KAAK3B,KAAL,CAAWK,gBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAf;AACH;;AACD,aACI;AAAK,QAAA,SAAS,EAAEpC,OAAO,CAACK,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKqD,YADL,EAEKH,YAFL,EAGI;AAAM,QAAA,QAAQ,EAAE,KAAK1B,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKsB,IADL,EAEI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CAHJ,EAOI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKlB,qBAAtB;AAA6C,QAAA,OAAO,EAAC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAyE,KAAK3B,KAAL,CAAWe,QAAX,GAAsB,SAAtB,GAAkC,SAA3G,CAPJ,CADJ;AAWH;;;;EAhJcxB,S;;AAmJnB,IAAM+D,eAAe,GAAG,SAAlBA,eAAkB,CAAAtD,KAAK,EAAI;AAC7B,SAAO;AACHgD,IAAAA,SAAS,EAAEhD,KAAK,CAACuD,IAAN,CAAWC,OADnB;AAEHN,IAAAA,KAAK,EAAElD,KAAK,CAACuD,IAAN,CAAWL,KAFf;AAGHG,IAAAA,cAAc,EAAErD,KAAK,CAACuD,IAAN,CAAWE,KAAX,KAAqB,IAHlC;AAIH5B,IAAAA,cAAc,EAAE7B,KAAK,CAAC6B,cAAN,CAAqB6B,QAJlC;AAKH5B,IAAAA,gBAAgB,EAAE9B,KAAK,CAACuD,IAAN,CAAWzB;AAL1B,GAAP;AAOH,CARD;;AAUA,IAAM6B,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAO;AACHlC,IAAAA,cAAc,EAAE,wBAACxB,KAAD,EAAQW,QAAR,EAAkBE,QAAlB;AAAA,aAA+B6C,QAAQ,CAACjE,OAAO,CAAC4D,IAAR,CAAarD,KAAb,EAAoBW,QAApB,EAA8BE,QAA9B,CAAD,CAAvC;AAAA,KADb;AAEHgB,IAAAA,qBAAqB,EAAE;AAAA,aAAM6B,QAAQ,CAACjE,OAAO,CAACkE,mBAAR,CAA4B,GAA5B,CAAD,CAAd;AAAA;AAFpB,GAAP;AAIH,CALD;;AAOA,eAAejE,OAAO,CAAC0D,eAAD,EAAiBK,kBAAjB,CAAP,CAA4C5D,IAA5C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignUp: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName] : {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = event => {\n        event.preventDefault();\n        this.props.onAuthenticate(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignUp: !prevState.isSignUp};\n        })\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key],\n            })\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n        ))\n\n        if (this.props.isLoading){\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if (this.props.error){\n            errorMessage =(\n                <p>{this.props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticate) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">Submit</Button>\n                </form>\n                <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticate: state.auth.token !== null,\n        buildingBurger: state.buildingBurger.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuthenticate: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}