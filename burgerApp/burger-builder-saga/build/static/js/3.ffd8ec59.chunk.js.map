{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","onChange","changed","value","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","clicked","checkoutCancel","btnType","checkoutContinue","state","orderForm","name","type","placeholder","validation","required","minLength","maxLength","valid","street","zipCode","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","totalPrice","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","isLoading","Spinner","Component","connect","burgerBuilder","loading","auth","dispatch","actions","withErrorHandler","axios","Checkout","history","goBack","replace","summary","react_router","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","path","match","component"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAkDeE,IA/CD,SAAAC,GACV,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAM9B,OAJIJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SAC/CL,EAAaM,KAAKL,IAAQM,SAGtBT,EAAMU,aACV,IAAM,QACFT,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACfC,UAAWb,EAAac,KAAK,MAAUhB,EAAMiB,cAD9B,CAEfC,SAAUlB,EAAMmB,QAChBC,MAAOpB,EAAMoB,SACb,MACJ,IAAM,WACFnB,EAAeN,EAAAgB,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CACfC,UAAWb,EAAac,KAAK,MAAUhB,EAAMiB,cAD9B,CAEfC,SAAUlB,EAAMmB,QAChBC,MAAOpB,EAAMoB,SACb,MACJ,IAAM,SACFnB,EACAN,EAAAgB,EAAAC,cAAA,UACIG,UAAWb,EAAac,KAAK,KAC7BE,SAAUlB,EAAMmB,QAChBC,MAAOpB,EAAMoB,OACZpB,EAAMiB,cAAcI,QAAQC,IAAI,SAAAC,GAAM,OACnC5B,EAAAgB,EAAAC,cAAA,UAAQY,IAAKD,EAAOH,MAAOA,MAAOG,EAAOH,OAAQG,EAAOE,iBAIhE,MACJ,QACIxB,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACfC,UAAWb,EAAac,KAAK,MAAUhB,EAAMiB,cAD9B,CAEfC,SAAUlB,EAAMmB,QAChBC,MAAOpB,EAAMoB,SAErB,OACIzB,EAAAgB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQuB,OACpB/B,EAAAgB,EAAAC,cAAA,SAAOG,UAAWZ,IAAQwB,OAAQ3B,EAAM4B,OACvC3B,yBC5Cb4B,EAAAC,QAAA,CAAkBJ,MAAA,sBAAAC,MAAA,sBAAAvB,aAAA,6BAAAK,QAAA,8CCAlBoB,EAAAC,QAAA,CAAkBC,gBAAA,gECAlBF,EAAAC,QAAA,CAAkBE,YAAA,kCAAAN,MAAA,+JCiBHO,EAbS,SAAAjC,GACpB,OACIkC,EAAAvB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQ4B,iBACpBG,EAAAvB,EAAAC,cAAA,mCACAsB,EAAAvB,EAAAC,cAAA,OAAKuB,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChCH,EAAAvB,EAAAC,cAAC0B,EAAA,EAAD,CAAQC,YAAavC,EAAMuC,eAE/BL,EAAAvB,EAAAC,cAAC4B,EAAA,EAAD,CAAQC,QAASzC,EAAM0C,eAAgBC,QAAQ,UAA/C,UACAT,EAAAvB,EAAAC,cAAC4B,EAAA,EAAD,CAAQC,QAASzC,EAAM4C,iBAAkBD,QAAQ,WAAjD,wGCDNX,6MACFa,MAAQ,CACJC,UAAW,CACPC,KAAM,CACFrC,YAAa,QACbO,cAAe,CACX+B,KAAM,OACNC,YAAa,aAEjB7B,MAAO,GACP8B,WAAY,CACRC,UAAU,EACVC,UAAW,EACXC,UAAW,IAEfC,OAAO,EACP/C,SAAS,GAEbgD,OAAQ,CACJ7C,YAAa,QACbO,cAAe,CACX+B,KAAM,OACNC,YAAa,UAEjB7B,MAAO,GACP8B,WAAY,CACRC,UAAU,EACVC,UAAW,EACXC,UAAW,IAEfC,OAAO,EACP/C,SAAS,GAEbiD,QAAS,CACL9C,YAAa,QACbO,cAAe,CACX+B,KAAM,OACNC,YAAa,YAEjB7B,MAAO,GACP8B,WAAY,CACRC,UAAU,EACVC,UAAW,EACXC,UAAW,GAEfC,OAAO,EACP/C,SAAS,GAEbkD,QAAS,CACL/C,YAAa,QACbO,cAAe,CACX+B,KAAM,OACNC,YAAa,WAEjB7B,MAAO,GACP8B,WAAY,CACRC,UAAU,GAEdG,OAAO,EACP/C,SAAS,GAEbmD,MAAO,CACHhD,YAAa,QACbO,cAAe,CACX+B,KAAM,QACNC,YAAa,SAEjB7B,MAAO,GACP8B,WAAY,CACRC,UAAU,GAEdG,OAAO,EACP/C,SAAS,GAEboD,eAAgB,CACZjD,YAAa,SACbO,cAAe,CACXI,QAAS,CACL,CAACD,MAAO,UAAWK,aAAc,WACjC,CAACL,MAAO,WAAYK,aAAc,cAE1CL,MAAO,WACP8B,WAAY,GACZI,OAAO,IAGfM,aAAa,KAGjBC,aAAe,SAACC,GACZA,EAAMC,iBACN,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAyBC,EAAKrB,MAAMC,UACzCkB,EAASC,GAAyBC,EAAKrB,MAAMC,UAAUmB,GAAuB7C,MAElF,IAAM+C,EAAQ,CACV5B,YAAa2B,EAAKlE,MAAMuC,YACxB6B,WAAYF,EAAKlE,MAAMqE,MACvBC,UAAWN,EACXO,OAAQL,EAAKlE,MAAMuE,QAEvBL,EAAKlE,MAAMwE,cAAcL,EAAMD,EAAKlE,MAAMyE,UAG9CC,oBAAsB,SAACZ,EAAOa,GAE1B,IAAMC,EAAsBC,YAAaX,EAAKrB,MAAMC,UAAU6B,GAAkB,CAC5EvD,MAAO0C,EAAMgB,OAAO1D,MACpBkC,MAAOyB,YAAcjB,EAAMgB,OAAO1D,MAAO8C,EAAKrB,MAAMC,UAAU6B,GAAiBzB,YAC/E3C,SAAS,IAEPyE,EAAmBH,YAAaX,EAAKrB,MAAMC,UAAZjC,OAAAoE,EAAA,EAAApE,CAAA,GAChC8D,EAAkBC,IAGnBhB,GAAc,EAClB,IAAK,IAAIe,KAAmBK,EACxBpB,EAAcoB,EAAiBL,GAAiBrB,OAASM,EAG7DM,EAAKgB,SAAS,CAACpC,UAAWkC,EAAkBpB,YAAaA,6EAGrD,IAAAuB,EAAAC,KACEC,EAAoB,GAC1B,IAAK,IAAI7D,KAAO4D,KAAKvC,MAAMC,UACvBuC,EAAkB7E,KAAK,CACnB8E,GAAI9D,EACJ+D,OAAQH,KAAKvC,MAAMC,UAAUtB,KAGrC,IAAIgE,EACAtD,EAAAvB,EAAAC,cAAA,QAAM6E,SAAUL,KAAKvB,cAChBwB,EAAkB/D,IAAI,SAAAoE,GAAW,OAC9BxD,EAAAvB,EAAAC,cAACc,EAAA,EAAD,CACAF,IAAKkE,EAAYJ,GACjB5E,YAAagF,EAAYH,OAAO7E,YAChCO,cAAeyE,EAAYH,OAAOtE,cAClCG,MAAOsE,EAAYH,OAAOnE,MAC1Bf,SAAUqF,EAAYH,OAAOjC,MAC7BhD,eAAgBoF,EAAYH,OAAOrC,WACnC3C,QAASmF,EAAYH,OAAOhF,QAC5BY,QAAS,SAAC2C,GAAD,OAAWqB,EAAKT,oBAAoBZ,EAAO4B,EAAYJ,SAEpEpD,EAAAvB,EAAAC,cAAC4B,EAAA,EAAD,CAAQmD,UAAWP,KAAKvC,MAAMe,YAAajB,QAAQ,WAAnD,UAMR,OAHIyC,KAAKpF,MAAM4F,YACXJ,EAAOtD,EAAAvB,EAAAC,cAACiF,EAAA,EAAD,OAGP3D,EAAAvB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQ6B,aACpBE,EAAAvB,EAAAC,cAAA,gCACC4E,UAzJSM,aA+KXC,cAhBS,SAAAlD,GACpB,MAAO,CACHN,YAAaM,EAAMmD,cAAczD,YACjC8B,MAAOxB,EAAMmD,cAAc5B,WAC3BwB,UAAW/C,EAAMsB,MAAM8B,QACvBxB,MAAO5B,EAAMqD,KAAKzB,MAClBF,OAAQ1B,EAAMqD,KAAK3B,SAIA,SAAA4B,GACvB,MAAO,CACH3B,cAAe,SAACF,EAAWG,GAAZ,OAAsB0B,EAASC,IAAuB9B,EAAWG,OAIzEsB,CAA6CM,YAAiBrE,EAAasE,MCrLpFC,6MAEF7D,eAAiB,WACbwB,EAAKlE,MAAMwG,QAAQC,YAGvB7D,iBAAmB,WACfsB,EAAKlE,MAAMwG,QAAQE,QAAQ,mGAI3B,IAAIC,EAAUzE,EAAAvB,EAAAC,cAACgG,EAAA,EAAD,CAAUC,GAAG,MAC3B,GAAIzB,KAAKpF,MAAMuC,YAAY,CACvB,IAAMuE,EAAoB1B,KAAKpF,MAAM+G,UAAY7E,EAAAvB,EAAAC,cAACgG,EAAA,EAAD,CAAUC,GAAG,MAAS,KACvEF,EACIzE,EAAAvB,EAAAC,cAAA,WACKkG,EACD5E,EAAAvB,EAAAC,cAACoG,EAAD,CACAzE,YAAa6C,KAAKpF,MAAMuC,YACxBK,iBAAkBwC,KAAKxC,iBACvBF,eAAgB0C,KAAK1C,iBACrBR,EAAAvB,EAAAC,cAACgG,EAAA,EAAD,CACAK,KAAM7B,KAAKpF,MAAMkH,MAAMD,KAAO,gBAC9BE,UAAWnF,KAIvB,OACI2E,SA5BWb,aAyCRC,sBARS,SAAAlD,GACpB,MAAO,CACHN,YAAaM,EAAMmD,cAAczD,YACjCwE,UAAWlE,EAAMsB,MAAM4C,YAKhBhB,CAAyBQ","file":"static/js/3.ffd8ec59.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.css'\n\nconst input = props => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n            className={inputClasses.join(' ')} {...props.elementConfig}\n            onChange={props.changed} \n            value={props.value}/>;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n            className={inputClasses.join(' ')} {...props.elementConfig}\n            onChange={props.changed} \n            value={props.value}/>;\n            break;\n        case ('select'):\n            inputElement = (\n            <select\n                className={inputClasses.join(' ')}\n                onChange={props.changed} \n                value={props.value}>\n                {props.elementConfig.options.map(option => (\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\n                ))}\n            </select>\n            );\n            break;\n        default:\n            inputElement = <input \n            className={inputClasses.join(' ')} {...props.elementConfig}\n            onChange={props.changed} \n            value={props.value}/>\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__1xBm4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1J81r\",\"Input\":\"ContactData__Input__19h-A\"};","import React from 'react';\nimport Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\nimport classes from './CheckoutSummary.css'\n\nconst checkoutSummary = props => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>Hope it tastes great!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button clicked={props.checkoutCancel} btnType=\"Danger\">CANCEL</Button>\n            <Button clicked={props.checkoutContinue} btnType=\"Success\">Continue</Button>\n        </div>\n    )\n}\n\nexport default checkoutSummary","import React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc//withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject } from '../../../shared/utility';\nimport { checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Full Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 30\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 30\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Zip Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}]\n                },\n                value: 'cheapest',\n                validation: \"\",\n                valid: true\n            },\n        },\n        formIsValid: false,\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm){\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            totalPrice: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n        this.props.onOrderBurger(order,this.props.token );\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n\n        const updatedFormElement =  updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        })\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        })\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm){\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid})\n    }\n\n    render(){\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            })\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                    key={formElement.id} \n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button disabled={!this.state.formIsValid} btnType=\"Success\">ORDER</Button>\n            </form>\n        );\n        if (this.props.isLoading){\n            form = <Spinner />\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter Contact Info</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        isLoading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport { Route, Redirect } from 'react-router-dom';\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\n\nclass Checkout extends Component {\n\n    checkoutCancel = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinue = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n    \n    render(){\n        let summary = <Redirect to=\"/\" />\n        if (this.props.ingredients){\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                    ingredients={this.props.ingredients}\n                    checkoutContinue={this.checkoutContinue}\n                    checkoutCancel={this.checkoutCancel}/>\n                    <Route \n                    path={this.props.match.path + '/contact-data'}\n                    component={ContactData}/>\n                </div>\n            )\n        }\n        return (\n            summary\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}